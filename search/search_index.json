{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tail-jsonl","text":"<p>Tail JSONL Logs</p>"},{"location":"#background","title":"Background","text":"<p>I wanted to find a tool that could:</p> <ol> <li>Convert a stream of JSONL logs into a readable <code>logfmt</code>-like output with minimal configuration</li> <li>Show exceptions on their own line</li> </ol> <p>I investigated a lot of alternatives such as: humanlog, lnav, goaccess, angle-grinder, jq, textualog, etc. but nothing would both cleanly format the JSONL data and show the exception.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install with <code>pipx</code></p> <pre><code>pipx install tail-jsonl\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Pipe JSONL output from any file, kubernetes (such as stern), Docker, etc.</p> <pre><code># Example piping input in shell\necho '{\"message\": \"message\", \"timestamp\": \"2023-01-01T01:01:01.0123456Z\", \"level\": \"debug\", \"data\": true, \"more-data\": [null, true, -123.123]}' | tail-jsonl\ncat tests/data/logs.jsonl | tail-jsonl\n\n# Optionall, pre-filter or format with jq, grep, awk, or other tools\ncat tests/data/logs.jsonl | jq '.record' --compact-output | tail-jsonl\n\n# An example stern command (also consider -o=extjson)\nstern envvars --context staging --container gateway --since=\"60m\" --output raw | tail-jsonl\n\n# Or with Docker Compose (note that awk, cut, and grep all buffer. For awk, add '; system(\"\")')\ndocker compose logs --follow | awk 'match($0, / \\| \\{.+/) { print substr($0, RSTART+3, RLENGTH); system(\"\") }' | tail-jsonl\n</code></pre> <p></p>"},{"location":"#configuration","title":"Configuration","text":"<p>Optionally, specify a path to a custom configuration file. See an example configuration file at: tests/config_default.toml</p> <pre><code>echo '...' | tail-jsonl --config-path=~/.tail-jsonl.toml\n</code></pre>"},{"location":"#project-status","title":"Project Status","text":"<p>See the <code>Open Issues</code> and/or the CODE_TAG_SUMMARY. For release history, see the CHANGELOG.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome pull requests! For your pull request to be accepted smoothly, we suggest that you first open a GitHub issue to discuss your idea. For resources on getting started with the code base, see the below documentation:</p> <ul> <li>DEVELOPER_GUIDE</li> <li>STYLE_GUIDE</li> </ul>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>We follow the Contributor Covenant Code of Conduct.</p>"},{"location":"#open-source-status","title":"Open Source Status","text":"<p>We try to reasonably meet most aspects of the \u201cOpenSSF scorecard\u201d from Open Source Insights</p>"},{"location":"#responsible-disclosure","title":"Responsible Disclosure","text":"<p>If you have any security issue to report, please contact the project maintainers privately. You can reach us at dev.act.kyle@gmail.com.</p>"},{"location":"#license","title":"License","text":"<p>LICENSE</p>"},{"location":"docs/Advanced_Documentation/","title":"Docs","text":"<p>Developer documentation</p>"},{"location":"docs/CHANGELOG/","title":"CHANGELOG","text":""},{"location":"docs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"docs/CHANGELOG/#fix","title":"Fix","text":"<ul> <li>bump 1.1 without release</li> <li>test loading user config and escaping dot-notation</li> </ul>"},{"location":"docs/CHANGELOG/#feat","title":"Feat","text":"<ul> <li>use a symbol to indicate each line</li> <li>indent by four spaces on wrap</li> <li>add version arg</li> <li>indent folded text</li> </ul>"},{"location":"docs/CHANGELOG/#refactor","title":"Refactor","text":"<ul> <li>end didn\u2019t work as hoped</li> <li>switch to beartype.typing</li> <li>folded text doesn\u2019t work as expected</li> </ul>"},{"location":"docs/CHANGELOG/#100-2023-01-31","title":"1.0.0 (2023-01-31)","text":""},{"location":"docs/CHANGELOG/#feat_1","title":"Feat","text":"<ul> <li>add option for configuration file</li> </ul>"},{"location":"docs/CHANGELOG/#001-2023-01-30","title":"0.0.1 (2023-01-30)","text":""},{"location":"docs/CHANGELOG/#feat_2","title":"Feat","text":"<ul> <li>first pass at the package</li> <li>initialize the repository</li> </ul>"},{"location":"docs/CODE_TAG_SUMMARY/","title":"Task Summary","text":"<p>Auto-Generated by <code>calcipy</code></p> Type Comment Last Edit Source File TODO Please describe the purpose and high-level explanation of the changes \u2013&gt; 2023-01-30 .github/PULL_REQUEST_TEMPLATE.md:5 FIXME Needs to support mkdocs: https://github.com/executablebooks/mdformat/issues/317 2023-01-30 .pre-commit-config.yaml:49 FIXME Replace with programmatic imports? Maybe explicit imports to check backward compatibility of public API? 2023-01-30 scripts/check_imports.py:7 TODO Replace with imports to test 2023-01-30 scripts/check_imports.py:14 PLANNED Add a flag (\u2013debug &amp; store_true) to print debugging information 2023-02-02 tail_jsonl/main.py:34 <p>Found code tags for FIXME (2), TODO (2), PLANNED (1)</p>"},{"location":"docs/DEVELOPER_GUIDE/","title":"Developer Notes","text":""},{"location":"docs/DEVELOPER_GUIDE/#local-development","title":"Local Development","text":"<pre><code>git clone https://github.com/kyleking/tail-jsonl.git\ncd tail-jsonl\npoetry install\n\n# See the available tasks\npoetry run doit list\n\n# Run the default task list (lint, auto-format, test coverage, etc.)\npoetry run doit --continue\n\n# Make code changes and run specific tasks as needed:\npoetry run doit run test\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#publishing","title":"Publishing","text":"<p>For testing, create an account on TestPyPi. Replace <code>...</code> with the API token generated on TestPyPi or PyPi respectively</p> <pre><code>poetry config repositories.testpypi https://test.pypi.org/legacy/\npoetry config pypi-token.testpypi ...\n\npoetry run doit run publish_test_pypi\n# If you didn't configure a token, you will need to provide your username and password to publish\n</code></pre> <p>To publish to the real PyPi</p> <pre><code>poetry config pypi-token.pypi ...\npoetry run doit run publish\n\n# For a full release, triple check the default tasks, increment the version, rebuild documentation (twice), and publish!\npoetry run doit run --continue\npoetry run doit run cl_bump lock document deploy_docs publish\n\n# For pre-releases use cl_bump_pre\npoetry run doit run cl_bump_pre -p rc\npoetry run doit run lock document deploy_docs publish\n</code></pre>"},{"location":"docs/DEVELOPER_GUIDE/#current-status","title":"Current Status","text":"File Statements Missing Excluded Coverage <code>tail_jsonl/__init__.py</code> 7 0 0 100.0% <code>tail_jsonl/_private/__init__.py</code> 0 0 0 100.0% <code>tail_jsonl/_private/core.py</code> 65 0 0 100.0% <code>tail_jsonl/config.py</code> 28 0 0 100.0% <code>tail_jsonl/main.py</code> 21 0 10 100.0% Totals 121 0 10 100.0% <p>Generated on: 2023-02-06</p>"},{"location":"docs/STYLE_GUIDE/","title":"Personal Style Guides","text":""},{"location":"docs/STYLE_GUIDE/#git","title":"Git","text":"<p>We use Commitizen to manage both an auto-generated Changelog and incrementing the release version following semver. For both of these automated outputs to work well, please follow the Conventional Commits style, which is described in more detail below.</p>"},{"location":"docs/STYLE_GUIDE/#commitizen-types-and-scopes","title":"Commitizen Types and Scopes","text":"<p><code>type(scope): description</code></p> <ul> <li>Types<ul> <li>fix: A bug fix</li> <li>feat: A new feature</li> <li>docs: Documentation-only changes (code comments, separate docs)</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons)</li> <li>perf: A code change that improves performance</li> <li>refactor: A change to production code that is not a fix, feat, or perf</li> <li>test: Adding missing or correcting existing tests</li> <li>build: Changes that affect the build system or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>A <code>!</code> can be used to indicate a breaking change (<code>refactor!: drop support for Node 6</code>)</li> <li>SemVer Rules<ul> <li>Based on commit type, the version will be auto-incremented: <code>fix : PATCH // feat : MINOR // BREAKING CHANGE : MAJOR</code></li> </ul> </li> </ul> </li> <li>Scopes<ul> <li>A Class, File name, Issue Number, other appropriate noun. As examples: <code>build(poetry): bump requests to v3</code> or <code>style(#32): add missing type annotations</code></li> </ul> </li> <li>Tips<ul> <li>What if a commit fits multiple types?<ul> <li>Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is the focus on more organized and intentional changes</li> </ul> </li> <li>Use <code>git rebase -i</code> to fix commit names prior to merging if incorrect types/scopes are used</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#git-description-guidelines","title":"Git Description Guidelines","text":"<ul> <li>Commit message guidelines<ul> <li>Full sentence with verb (lowercase) and concise description. Below are modified examples for Conventional Commits<ul> <li><code>fix(roles): bug in admin role permissions</code></li> <li><code>feat(ui): implement new button design</code></li> <li><code>build(pip): upgrade package to remove vulnerabilities</code></li> <li><code>refactor: file structure to improve code readability</code></li> <li><code>perf(cli): rewrite methods</code></li> <li><code>feat(api): endpoints to implement new customer dashboard</code></li> </ul> </li> </ul> </li> <li>How to write a good commit message<ul> <li>A diff will tell you what changed, but only the commit message can properly tell you why.</li> <li>Keep in mind: This has all been said before.</li> <li>From the seven rules of a great Git commit message:<ul> <li> <ol> <li>Try for 50 characters, but consider 72 the hard limit</li> </ol> </li> <li> <ol> <li>Use the body to explain what and why vs. how</li> </ol> </li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#issue-labels-and-milestones","title":"Issue Labels and Milestones","text":"<p>Personal Guide</p> <ul> <li>For Issue Labels, see labels.yml</li> <li>Milestones<ul> <li>Current Tasks: main milestone (name could change based on a specific project, sprint, or month)</li> <li>Next Tasks</li> <li>Blue Sky</li> </ul> </li> </ul> Research <ul> <li>[Sane Github Labels](https://medium.com/@dave_lunny/sane-github-labels-c5d2e6004b63) and see [sensible-github-labels](https://github.com/Relequestual/sensible-github-labels) for full descriptions of each</li> <ul> <li>\u201cit is much more helpful to see the status and type of all issues at a glance.\u201d</li> <li>One of each:</li> <ul> <li>Status: \u2026</li> <ul><li>Abandoned, Accepted, Available, Blocked, Completed, In Progress, On Hold, Pending, Review Needed, Revision Needed</li></ul> <li>Type: \u2026</li> <ul><li>Bug, Maintenance, Question, Enhancement</li></ul> <li>Priority: \u2026</li> <ul><li>Critical, High, Medium, Low</li></ul> </ul> </ul> <li>[Britecharts](https://britecharts.github.io/britecharts/github-labels.html)</li> <ul> <li>Status: \u2026</li> <ul> <li>On Review \u2013 Request that we are pondering if including or not</li> <li>Needs Reproducing \u2013 For bugs that need to be reproduced in order to get fixed</li> <li>Needs Design \u2013 Feature that needs a design</li> <li>Ready to Go \u2013 Issue that has been defined and is ready to get started with</li> <li>In Progress \u2013 Issue that is being worked on right now.</li> <li>Completed \u2013 Finished feature or fix</li> </ul> <li>Type: \u2026</li> <ul> <li>Bug \u2013 An unexpected problem or unintended behavior</li> <li>Feature \u2013 A new feature request</li> <li>Maintenance \u2013 A regular maintenance chore or task, including refactors, build system, CI, performance improvements</li> <li>Documentation \u2013 A documentation improvement task</li> <li>Question \u2013 An issue or PR that needs more information or a user question</li> </ul> <li>Not Included</li> <ul> <li>Priority: They would add complexity and overhead due to the discussions, but could help with the roadmap</li> <li>Technology Labels: It can create too much overhead, as properly tag with technologies all the issues could be time consuming</li> </ul> </ul> </ul> <li>[Ian Bicking Blog](https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html)</li> <ul> <li>Milestone Overview</li> <ul> <li>What are we doing right now?</li> <li>What aren\u2019t we doing right now?</li> <ul> <li>2a. Stuff we\u2019ll probably do soon</li> <li>2b. Stuff we probably won\u2019t do soon</li> </ul> <li>What aren\u2019t we sure about?</li> </ul> <li>Milestone Descriptions</li> <ul> <li>Stuff we are doing right now: this is the \u201cmain\u201d milestone. We give it a name (like Alpha 2 or Strawberry Rhubarb Pie) and we write down what we are trying to accomplish with the milestone. We create a new milestone when we are ready for the next iteration.</li> <li>Stuff we\u2019ll probably do soon: this is a standing \u201c**Next Tasks**\u201d milestone. We never change or rename this milestone.</li> <ul><li>We use a permanent \u201cNext Tasks\u201d milestone (as opposed to renaming it to \u201cAlpha 3\u201d or actual-next-iteration milestone) because we don\u2019t want to presume or default to including something in the real next iteration. When we\u2019re ready to start planning the next iteration we\u2019ll create a new milestone, and only deliberately move things into that milestone.</li></ul> <li>Stuff we probably won\u2019t do soon: this is a standing \u201c**Blue Sky**\u201d milestone. We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally ignored.</li> <li>What aren\u2019t we sure about?: issues with no milestone.</li> </ul> <li>Label: \u201cNeeds Discussion\u201d - (addressed in a triage meeting) - use liberally for either big or small tickets</li> <li>\u201cIt\u2019s better to give people more power: it\u2019s actually helpful if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have\u201d</li> </ul>"},{"location":"docs/STYLE_GUIDE/#external-links","title":"External Links","text":"<p>TODO: Revisit</p> <ul> <li>Git: The Simple Guide</li> <li>Commit Messages and why use the present tense</li> <li>Github\u2019s Advice on Github</li> <li>Most Comprehensive Guide</li> <li>Git Pro Book (free)<ul> <li>Bash Tab-Completion Snippet</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#python","title":"Python","text":"<p>TODO: Revisit</p> <ul> <li>Python Style Guides<ul> <li>https://gist.github.com/sloria/7001839</li> <li>http://www.nilunder.com/blog/2013/08/03/pythonic-sensibilities/</li> <li>https://innoq.github.io/cards42org_en/</li> <li>https://docs.openstack.org/hacking/latest/user/hacking.html#styleguide</li> <li>https://www.python.org/doc/humor/</li> <li>https://docs.python-guide.org/writing/reading/</li> <li>https://realpython.com/python-refactoring/</li> </ul> </li> </ul>"},{"location":"docs/STYLE_GUIDE/#adrs","title":"ADRs","text":"<p>TODO: Revisit</p> <ul> <li>Examples<ul> <li>https://github.com/pawamoy/mkdocstrings/issues/28</li> </ul> </li> </ul> <p>&lt;\u2013 Links \u2013&gt;</p>"},{"location":"modules/tail_jsonl/_code_diagrams/","title":"Code Diagrams","text":"<p>Auto-generated with <code>pylint-pyreverse</code></p>"},{"location":"modules/tail_jsonl/_code_diagrams/#packages","title":"Packages","text":"<p>Full Size</p>"},{"location":"modules/tail_jsonl/_code_diagrams/#classes","title":"Classes","text":"<p>Full Size</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>tail_jsonl     * _private         * core     * config     * main</li> </ul>"},{"location":"reference/tail_jsonl/","title":"tail_jsonl","text":"<p>tail_jsonl.</p>"},{"location":"reference/tail_jsonl/config/","title":"config","text":"<p>Configuration.</p>"},{"location":"reference/tail_jsonl/config/#tail_jsonl.config-classes","title":"Classes","text":""},{"location":"reference/tail_jsonl/config/#tail_jsonl.config.Config","title":"Config","text":"<p>         Bases: <code>BaseModel</code></p> <p><code>tail-jsonl</code> config.</p> Source code in <code>tail_jsonl/config.py</code> <pre><code>class Config(BaseModel):\n\"\"\"`tail-jsonl` config.\"\"\"\nstyles: Styles = Field(default_factory=Styles)\nkeys: Keys = Field(default_factory=Keys)\n</code></pre>"},{"location":"reference/tail_jsonl/config/#tail_jsonl.config.Keys","title":"Keys","text":"<p>         Bases: <code>BaseModel</code></p> <p>Special Keys.</p> Source code in <code>tail_jsonl/config.py</code> <pre><code>class Keys(BaseModel):\n\"\"\"Special Keys.\"\"\"\ntimestamp: List[str] = Field(default_factory=lambda: ['timestamp', 'record.time.repr'])\nlevel: List[str] = Field(default_factory=lambda: ['level', 'record.level.name'])\nmessage: List[str] = Field(default_factory=lambda: ['event', 'record.message'])\non_own_line: List[str] = Field(default_factory=lambda: ['text', 'exception'])\n</code></pre>"},{"location":"reference/tail_jsonl/config/#tail_jsonl.config.Styles","title":"Styles","text":"<p>         Bases: <code>BaseModel</code></p> <p>Styles configuration.</p> <p>Refer to https://rich.readthedocs.io/en/latest/style.html for available style</p> <p>Inspired by: https://github.com/Delgan/loguru/blob/07f94f3c8373733119f85aa8b9ca05ace3325a4b/loguru/_defaults.py#L31-L73</p> <p>And: https://github.com/hynek/structlog/blob/bcfc7f9e60640c150bffbdaeed6328e582f93d1e/src/structlog/dev.py#L126-L141</p> Source code in <code>tail_jsonl/config.py</code> <pre><code>class Styles(BaseModel):\n\"\"\"Styles configuration.\n    Refer to https://rich.readthedocs.io/en/latest/style.html for available style\n    Inspired by: https://github.com/Delgan/loguru/blob/07f94f3c8373733119f85aa8b9ca05ace3325a4b/loguru/_defaults.py#L31-L73\n    And: https://github.com/hynek/structlog/blob/bcfc7f9e60640c150bffbdaeed6328e582f93d1e/src/structlog/dev.py#L126-L141\n    \"\"\"\ntimestamp: str = 'dim grey'\nmessage: str = ''\nlevel_error: str = 'bold red'\nlevel_warn: str = 'bold yellow'\nlevel_info: str = 'bold green'\nlevel_debug: str = 'bold blue'\nlevel_fallback: str = ''\nkey: str = 'green'\nvalue: str = ''\n@cached_property\ndef _level_lookup(self) -&gt; Dict[str, str]:\nreturn {\n'ERROR': self.level_error,\n'WARNING': self.level_warn,\n'WARN': self.level_warn,\n'INFO': self.level_info,\n'DEBUG': self.level_debug,\n}\n@beartype\ndef get_level_style(self, level: str) -&gt; str:\n\"\"\"Return the right style for the specified level.\"\"\"\nreturn self._level_lookup.get(level.upper(), self.level_fallback)\n</code></pre>"},{"location":"reference/tail_jsonl/config/#tail_jsonl.config.Styles-functions","title":"Functions","text":""},{"location":"reference/tail_jsonl/config/#tail_jsonl.config.Styles.get_level_style","title":"get_level_style","text":"<pre><code>get_level_style(level)\n</code></pre> <p>Return the right style for the specified level.</p> Source code in <code>tail_jsonl/config.py</code> <pre><code>@beartype\ndef get_level_style(self, level: str) -&gt; str:\n\"\"\"Return the right style for the specified level.\"\"\"\nreturn self._level_lookup.get(level.upper(), self.level_fallback)\n</code></pre>"},{"location":"reference/tail_jsonl/main/","title":"main","text":"<p>Public CLI interface.</p>"},{"location":"reference/tail_jsonl/main/#tail_jsonl.main-classes","title":"Classes","text":""},{"location":"reference/tail_jsonl/main/#tail_jsonl.main-functions","title":"Functions","text":""},{"location":"reference/tail_jsonl/main/#tail_jsonl.main.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>CLI Entrypoint.</p> Source code in <code>tail_jsonl/main.py</code> <pre><code>@beartype\ndef main() -&gt; None:  # pragma: no cover\n\"\"\"CLI Entrypoint.\"\"\"\n# PLANNED: Add a flag (--debug &amp; store_true) to print debugging information\nparser = argparse.ArgumentParser(description='Pipe JSONL Logs for pretty printing')\nparser.add_argument(\n'-v', '--version', action='version',\nversion=f'%(prog)s {__version__}', help=\"Show program's version number and exit.\",\n)\nparser.add_argument('--config-path', help='Path to a configuration file')\noptions = parser.parse_args(sys.argv[1:])\nconfig = _load_config(options.config_path)\nconsole = Console()\nfor line in fileinput.input():\nprint_record(line, console, config)\n</code></pre>"},{"location":"reference/tail_jsonl/_private/","title":"_private","text":""},{"location":"reference/tail_jsonl/_private/core/","title":"core","text":"<p>Core print logic.</p>"},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core-classes","title":"Classes","text":""},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core.Record","title":"Record","text":"<p>         Bases: <code>BaseModel</code></p> <p>Record Model.</p> Source code in <code>tail_jsonl/_private/core.py</code> <pre><code>class Record(BaseModel):\n\"\"\"Record Model.\"\"\"\ntimestamp: str\nlevel: str\nmessage: str\ndata: Dict  # type: ignore[type-arg]\n@classmethod\ndef from_line(cls, data: Dict, config: Config) -&gt; 'Record':  # type: ignore[type-arg]\n\"\"\"Extract Record from jsonl.\"\"\"\nreturn cls(\ntimestamp=pop_key(data, config.keys.timestamp, '&lt;no timestamp&gt;'),\nlevel=pop_key(data, config.keys.level, '&lt;no level&gt;'),\nmessage=pop_key(data, config.keys.message, '&lt;no message&gt;'),\ndata=data,\n)\n</code></pre>"},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core.Record-functions","title":"Functions","text":""},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core.Record.from_line","title":"from_line  <code>classmethod</code>","text":"<pre><code>from_line(data, config)\n</code></pre> <p>Extract Record from jsonl.</p> Source code in <code>tail_jsonl/_private/core.py</code> <pre><code>@classmethod\ndef from_line(cls, data: Dict, config: Config) -&gt; 'Record':  # type: ignore[type-arg]\n\"\"\"Extract Record from jsonl.\"\"\"\nreturn cls(\ntimestamp=pop_key(data, config.keys.timestamp, '&lt;no timestamp&gt;'),\nlevel=pop_key(data, config.keys.level, '&lt;no level&gt;'),\nmessage=pop_key(data, config.keys.message, '&lt;no message&gt;'),\ndata=data,\n)\n</code></pre>"},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core-functions","title":"Functions","text":""},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core.pop_key","title":"pop_key","text":"<pre><code>pop_key(data, keys, fallback)\n</code></pre> <p>Safely find the first key in the data or default to the fallback.</p> Source code in <code>tail_jsonl/_private/core.py</code> <pre><code>@beartype\ndef pop_key(data: Dict, keys: List[str], fallback: str) -&gt; Any:  # type: ignore[type-arg]\n\"\"\"Safely find the first key in the data or default to the fallback.\"\"\"\nreturn _pop_key(data, copy(keys), fallback)\n</code></pre>"},{"location":"reference/tail_jsonl/_private/core/#tail_jsonl._private.core.print_record","title":"print_record","text":"<pre><code>print_record(line, console, config)\n</code></pre> <p>Format and print the record.</p> Source code in <code>tail_jsonl/_private/core.py</code> <pre><code>@beartype\ndef print_record(line: str, console: Console, config: Config) -&gt; None:\n\"\"\"Format and print the record.\"\"\"\ntry:\nrecord = Record.from_line(json.loads(line), config=config)\nexcept Exception:\nlogger.exception('Error in tail-json to parse line', line=line)\nconsole.print('')  # Line break\nreturn\nlevel_style = config.styles.get_level_style(record.level)\nmessage_style = config.styles.message or level_style\ntext = Text()\ntext.append(_PRE_STR, style=level_style)\ntext.append(f'{record.timestamp: &lt;28}', style=config.styles.timestamp)\ntext.append(f' {record.level: &lt;7}', style=level_style)\ntext.append(f' {record.message: &lt;20}', style=message_style)\nfull_lines = []\nfor key in config.keys.on_own_line:\nline = record.data.pop(key, None)\nif line:\nfull_lines.append((key, line))\nfor key, value in record.data.items():\ntext.append(f' {key}:', style=config.styles.key)\ntext.append(f' {str(value): &lt;10}', style=config.styles.value)\nconsole.print(text)\nfor key, line in full_lines:\nnew_text = Text()\nnew_text.append(f' \u221f {key}', style='bold green')\nnew_text.append(f': {line}')\nconsole.print(new_text)\n</code></pre>"}]}